{
  "_args": [
    [
      {
        "raw": "graphql-tools",
        "scope": null,
        "escapedName": "graphql-tools",
        "name": "graphql-tools",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/jconstanzo/projects/le3/desktop-apollo-test/server-test"
    ]
  ],
  "_from": "graphql-tools@latest",
  "_id": "graphql-tools@0.11.0",
  "_inCache": true,
  "_location": "/graphql-tools",
  "_nodeVersion": "5.6.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/graphql-tools-0.11.0.tgz_1490811671553_0.9693566099740565"
  },
  "_npmUser": {
    "name": "helfer",
    "email": "helfer@meteor.com"
  },
  "_npmVersion": "3.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-tools",
    "scope": null,
    "escapedName": "graphql-tools",
    "name": "graphql-tools",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-tools/-/graphql-tools-0.11.0.tgz",
  "_shasum": "14c372f6ddad7e63a757094d541a937d6b31b7da",
  "_shrinkwrap": null,
  "_spec": "graphql-tools",
  "_where": "/home/jconstanzo/projects/le3/desktop-apollo-test/server-test",
  "author": {
    "name": "Jonas Helfer",
    "email": "jonas@helfer.email"
  },
  "bugs": {
    "url": "https://github.com/apollostack/graphql-tools/issues"
  },
  "dependencies": {
    "@types/graphql": "^0.9.0",
    "deprecated-decorator": "^0.1.6",
    "lodash": "^4.3.0",
    "uuid": "^3.0.1"
  },
  "description": "A set of useful tools for GraphQL",
  "devDependencies": {
    "@types/bluebird": "^3.0.32",
    "@types/chai": "^3.4.32",
    "@types/lodash": "^4.14.34",
    "@types/mocha": "^2.2.31",
    "@types/node": "^7.0.5",
    "@types/request": "0.0.40",
    "@types/request-promise": "^4.1.33",
    "@types/uuid": "^2.0.29",
    "body-parser": "^1.15.0",
    "chai": "^3.5.0",
    "express": "^4.13.4",
    "graphql": "^0.9.0",
    "graphql-subscriptions": "^0.3.0",
    "graphql-type-json": "^0.1.3",
    "istanbul": "^0.4.5",
    "mocha": "^3.0.1",
    "remap-istanbul": "0.8.0",
    "request": "^2.72.0",
    "request-promise": "^4.1.0",
    "rimraf": "^2.5.4",
    "source-map-support": "^0.4.7",
    "tslint": "^4.2.0",
    "typescript": "2.2.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "14c372f6ddad7e63a757094d541a937d6b31b7da",
    "tarball": "https://registry.npmjs.org/graphql-tools/-/graphql-tools-0.11.0.tgz"
  },
  "gitHead": "b12973c86e00be209d04af0184780998056051c4",
  "homepage": "https://github.com/apollostack/graphql-tools#readme",
  "keywords": [
    "GraphQL",
    "Apollo",
    "JavaScript",
    "TypeScript",
    "Mock",
    "Schema",
    "Schema Language",
    "Tools"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "helfer",
      "email": "helfer@meteor.com"
    },
    {
      "name": "mdg",
      "email": "npm@meteor.com"
    },
    {
      "name": "sashko",
      "email": "sashko@stubailo.com"
    }
  ],
  "name": "graphql-tools",
  "optionalDependencies": {
    "@types/graphql": "^0.9.0"
  },
  "peerDependencies": {
    "graphql": "^0.8.0 || ^0.9.0 || ^0.10.0"
  },
  "readme": "# GraphQL-tools: generate and mock GraphQL.js schemas\n[![npm version](https://badge.fury.io/js/graphql-tools.svg)](https://badge.fury.io/js/graphql-tools)\n[![Build Status](https://travis-ci.org/apollographql/graphql-tools.svg?branch=master)](https://travis-ci.org/apollographql/graphql-tools)\n[![Coverage Status](https://coveralls.io/repos/github/apollographql/graphql-tools/badge.svg?branch=master)](https://coveralls.io/github/apollographql/graphql-tools?branch=master)\n[![Get on Slack](https://img.shields.io/badge/slack-join-orange.svg)](http://www.apollostack.com/#slack)\n\nThis package allows you to use the GraphQL schema language to build your [GraphQL.js](https://github.com/graphql/graphql-js) schema, and also includes useful schema tools like per-type mocking.\n\n## Documentation\n\n[Read the docs.](http://dev.apollodata.com/tools/graphql-tools/index.html)\n\n## Example\n\nThe [\"Hello World\" server](https://github.com/apollostack/frontpage-server) which powers our client examples is a great place to start if you're looking for a minimal codebase powered by `graphql-tools`.\n\nWhen using `graphql-tools`, you describe the schema as a GraphQL type language string:\n\n```js\n\nconst schema = `\ntype Author {\n  id: ID! # the ! means that every author object _must_ have an id\n  firstName: String\n  lastName: String\n  posts: [Post] # the list of Posts by this author\n}\n\ntype Post {\n  id: ID!\n  title: String\n  author: Author\n  votes: Int\n}\n\n# the schema allows the following query:\ntype Query {\n  posts: [Post]\n}\n\n# this schema allows the following mutation:\ntype Mutation {\n  upvotePost (\n    postId: ID!\n  ): Post\n}\n\n# we need to tell the server which types represent the root query\n# and root mutation types. We call them RootQuery and RootMutation by convention.\nschema {\n  query: Query\n  mutation: Mutation\n}\n`;\n\nexport default schema;\n```\n\nThen you define resolvers as a nested object that maps type and field names to resolver functions:\n\n```js\nconst resolverMap = {\n  Query: {\n    posts() {\n      return posts;\n    },\n  },\n  Mutation: {\n    upvotePost(_, { postId }) {\n      const post = find(posts, { id: postId });\n      if (!post) {\n        throw new Error(`Couldn't find post with id ${postId}`);\n      }\n      post.votes += 1;\n      return post;\n    },\n  },\n  Author: {\n    posts(author) {\n      return filter(posts, { authorId: author.id });\n    },\n  },\n  Post: {\n    author(post) {\n      return find(authors, { id: post.authorId });\n    },\n  },\n};\n\nexport default resolverMap;\n```\n\nAt the end, the schema and resolvers are combined using `makeExecutableSchema`:\n\n```js\nimport schema from './data/schema.js';\nimport resolverMap from './data/resolvers';\nimport { makeExecutableSchema } from 'graphql-tools';\n\nconst executableSchema = makeExecutableSchema({\n  typeDefs: schema,\n  resolvers: resolverMap,\n});\n```\n\nThis example has the entire type definition in one string and all resolvers in one object, but you can combine types and resolvers from multiple files, as documented in the [modularizing the schema](http://dev.apollodata.com/tools/graphql-tools/generate-schema.html#modularizing) section of the docs.\n\n## Contributions\n\nContributions, issues and feature requests are very welcome. If you are using this package and fixed a bug for yourself, please consider submitting a PR!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollostack/graphql-tools.git"
  },
  "scripts": {
    "clean": "rimraf dist",
    "compile": "tsc",
    "coverage": "istanbul cover _mocha -- --reporter dot --full-trace ./dist/test/tests.js",
    "lint": "tslint $(find src | grep ts$)",
    "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
    "posttest": "npm run lint",
    "prepublish": "npm run compile",
    "prerelease": "npm test",
    "pretest": "npm run clean && npm run compile",
    "release": "standard-version",
    "test": "npm run testonly --",
    "testonly": "mocha --reporter spec --full-trace ./dist/test/tests.js",
    "typings": "typings install",
    "watch": "tsc -w"
  },
  "typescript": {
    "definition": "dist/index.d.ts"
  },
  "typings": "dist/index.d.ts",
  "version": "0.11.0"
}
